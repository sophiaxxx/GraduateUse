"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var document_ref_1 = require("./document-ref");
var BigScreenService = (function () {
    function BigScreenService(_documentRef) {
        this._documentRef = _documentRef;
        this.fnMap = [
            // Object keys
            [
                'requestFullscreen',
                'exitFullscreen',
                'fullscreenElement',
                'fullscreenEnabled',
                'fullscreenchange',
                'fullscreenerror'
            ],
            // New WebKit
            [
                'webkitRequestFullscreen',
                'webkitExitFullscreen',
                'webkitFullscreenElement',
                'webkitFullscreenEnabled',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Old WebKit (Safari 5.1)
            [
                'webkitRequestFullScreen',
                'webkitCancelFullScreen',
                'webkitCurrentFullScreenElement',
                'webkitCancelFullScreen',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Mozilla
            [
                'mozRequestFullScreen',
                'mozCancelFullScreen',
                'mozFullScreenElement',
                'mozFullScreenEnabled',
                'mozfullscreenchange',
                'mozfullscreenerror'
            ],
            // MS
            [
                'msRequestFullscreen',
                'msExitFullscreen',
                'msFullscreenElement',
                'msFullscreenEnabled',
                'MSFullscreenChange',
                'MSFullscreenError'
            ]
        ];
        this.keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;
        var ret = {};
        var val;
        for (var i = 0; i < this.fnMap.length; i++) {
            val = this.fnMap[i];
            if (val && val[1] in this._documentRef.nativeDocument) {
                for (i = 0; i < val.length; i++) {
                    // Map everything to the first list of keys
                    ret[this.fnMap[0][i].toString()] = val[i];
                }
                this.fn = ret;
            }
        }
    }
    BigScreenService.prototype.request = function (elem) {
        var request = this.fn.requestFullscreen;
        elem = elem || this._documentRef.nativeDocument.documentElement;
        // Work around Safari 5.1 bug: reports support for
        // keyboard in fullscreen even though it doesn't.
        // Browser sniffing, since the alternative with
        // setTimeout is even worse.
        if (/5\.1[.\d]* Safari/.test(navigator.userAgent)) {
            elem[request]();
        }
        else {
            elem[request](this.keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
        }
    };
    BigScreenService.prototype.exit = function () {
        this._documentRef.nativeDocument[this.fn.exitFullscreen]();
    };
    BigScreenService.prototype.toggle = function (elem) {
        if (this.isFullscreen()) {
            this.exit();
        }
        else {
            this.request(elem);
        }
    };
    BigScreenService.prototype.onChange = function (callback) {
        this._documentRef.nativeDocument.addEventListener(this.fn.fullscreenchange, callback, false);
    };
    BigScreenService.prototype.onError = function (callback) {
        this._documentRef.nativeDocument.addEventListener(this.fn.fullscreenerror, callback, false);
    };
    BigScreenService.prototype.isFullscreen = function () {
        return Boolean(this._documentRef.nativeDocument[this.fn.fullscreenElement]);
    };
    BigScreenService.prototype.isEnabled = function () {
        // Coerce to boolean in case of old WebKit
        return Boolean(this._documentRef.nativeDocument[this.fn.fullscreenEnabled]);
    };
    BigScreenService.prototype.getElement = function () {
        return this._documentRef.nativeDocument[this.fn.fullscreenElement];
    };
    BigScreenService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    BigScreenService.ctorParameters = function () { return [
        { type: document_ref_1.DocumentRef, },
    ]; };
    return BigScreenService;
}());
exports.BigScreenService = BigScreenService;
//# sourceMappingURL=bigscreen.service.js.map